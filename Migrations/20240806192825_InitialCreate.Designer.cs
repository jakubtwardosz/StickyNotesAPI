// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StickyNotesApi.Data;

#nullable disable

namespace StickyNotesAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240806192825_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("StickyNotesAPI.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("StickyNotesAPI.Models.Note", b =>
                {
                    b.OwnsOne("StickyNotesAPI.Models.ColorDetails", "Colors", b1 =>
                        {
                            b1.Property<int>("NoteId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ColorBody")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("ColorHeader")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("ColorText")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .HasColumnType("TEXT");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.OwnsOne("StickyNotesAPI.Models.PositionDetails", "Position", b1 =>
                        {
                            b1.Property<int>("NoteId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.Navigation("Colors")
                        .IsRequired();

                    b.Navigation("Position")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
